{"filter":false,"title":"main.js.erb","tooltip":"/app/views/home/main.js.erb","undoManager":{"mark":8,"position":8,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":15,"column":0},"action":"insert","lines":["var canvas = document.getElemmentById('canvas')","var context = canvas.getContext('2d');","","var radius = 10; ","","canvas.width = window.innerWidth;","canvas.height = window.innerHeight; ","","var putPoint = function(e){","\tcontext.beginPath();","\tcontext.arc(e.offsetX, e.offsetY, radius, 0, Math.PI*2);","\tcontext.fill();","}","canvas.addEventListener('mousedown', putPoint);","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":0,"column":3},"action":"insert","lines":["// "]},{"start":{"row":1,"column":0},"end":{"row":1,"column":3},"action":"insert","lines":["// "]},{"start":{"row":3,"column":0},"end":{"row":3,"column":3},"action":"insert","lines":["// "]},{"start":{"row":5,"column":0},"end":{"row":5,"column":3},"action":"insert","lines":["// "]},{"start":{"row":6,"column":0},"end":{"row":6,"column":3},"action":"insert","lines":["// "]},{"start":{"row":8,"column":0},"end":{"row":8,"column":3},"action":"insert","lines":["// "]},{"start":{"row":9,"column":0},"end":{"row":9,"column":3},"action":"insert","lines":["// "]},{"start":{"row":10,"column":0},"end":{"row":10,"column":3},"action":"insert","lines":["// "]},{"start":{"row":11,"column":0},"end":{"row":11,"column":3},"action":"insert","lines":["// "]},{"start":{"row":12,"column":0},"end":{"row":12,"column":3},"action":"insert","lines":["// "]},{"start":{"row":13,"column":0},"end":{"row":13,"column":3},"action":"insert","lines":["// "]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":0},"end":{"row":44,"column":1},"action":"insert","lines":["function init () {","\t// Attach the mousemove event handler","\tcanvas.addEventListener('mousemove', ev_mousemove, false);","}","","// The mousemove event handler","var started = false;","function ev_mousemove (ev) {","\tvar x, y;","","\t// Get the mouse position relative to the <canvas> element","\tif (ev.layerX || ev.layerX == 0) { // Firefox","\t\tx = ev.layerX;","\t\ty = ev.layerY;","\t} else if (ev.offsetX || ev.offsetX == 0) { // Opera","\t\tx = ev.offsetX;","\t\ty = ev.offsetY;","\t}","","\t// The event handler works like a drawing pencil which","\t// tracks the mouse movements. We start drawing a path made up of lines","\tif (!started) {","\t\tcontext.beginPath();","\t\tcontext.moveTo(x, y);","\t\tstarted = true;","\t} else {","\t\tcontext.lineTo(x, y);","\t\tcontext.stroke();","\t}","}"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":0},"end":{"row":44,"column":1},"action":"remove","lines":["function init () {","\t// Attach the mousemove event handler","\tcanvas.addEventListener('mousemove', ev_mousemove, false);","}","","// The mousemove event handler","var started = false;","function ev_mousemove (ev) {","\tvar x, y;","","\t// Get the mouse position relative to the <canvas> element","\tif (ev.layerX || ev.layerX == 0) { // Firefox","\t\tx = ev.layerX;","\t\ty = ev.layerY;","\t} else if (ev.offsetX || ev.offsetX == 0) { // Opera","\t\tx = ev.offsetX;","\t\ty = ev.offsetY;","\t}","","\t// The event handler works like a drawing pencil which","\t// tracks the mouse movements. We start drawing a path made up of lines","\tif (!started) {","\t\tcontext.beginPath();","\t\tcontext.moveTo(x, y);","\t\tstarted = true;","\t} else {","\t\tcontext.lineTo(x, y);","\t\tcontext.stroke();","\t}","}"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":0},"end":{"row":71,"column":12},"action":"insert","lines":["if(window.addEventListener) {","window.addEventListener('load', function () {","  var canvas, context;","","  // Initialization sequence.","  function init () {","    // Find the canvas element.","    canvas = document.getElementById('imageView');","    if (!canvas) {","      alert('Error: I cannot find the canvas element!');","      return;","    }","","    if (!canvas.getContext) {","      alert('Error: no canvas.getContext!');","      return;","    }","","    // Get the 2D canvas context.","    context = canvas.getContext('2d');","    if (!context) {","      alert('Error: failed to getContext!');","      return;","    }","","    // Attach the mousemove event handler.","    canvas.addEventListener('mousemove', ev_mousemove, false);","  }","","  // The mousemove event handler.","  var started = false;","  function ev_mousemove (ev) {","    var x, y;","","    // Get the mouse position relative to the canvas element.","    if (ev.layerX || ev.layerX == 0) { // Firefox","      x = ev.layerX;","      y = ev.layerY;","    } else if (ev.offsetX || ev.offsetX == 0) { // Opera","      x = ev.offsetX;","      y = ev.offsetY;","    }","","    // The event handler works like a drawing pencil which tracks the mouse ","    // movements. We start drawing a path made up of lines.","    if (!started) {","      context.beginPath();","      context.moveTo(x, y);","      started = true;","    } else {","      context.lineTo(x, y);","      context.stroke();","    }","  }","","  init();","}, false); }"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":0},"end":{"row":71,"column":12},"action":"remove","lines":["if(window.addEventListener) {","window.addEventListener('load', function () {","  var canvas, context;","","  // Initialization sequence.","  function init () {","    // Find the canvas element.","    canvas = document.getElementById('imageView');","    if (!canvas) {","      alert('Error: I cannot find the canvas element!');","      return;","    }","","    if (!canvas.getContext) {","      alert('Error: no canvas.getContext!');","      return;","    }","","    // Get the 2D canvas context.","    context = canvas.getContext('2d');","    if (!context) {","      alert('Error: failed to getContext!');","      return;","    }","","    // Attach the mousemove event handler.","    canvas.addEventListener('mousemove', ev_mousemove, false);","  }","","  // The mousemove event handler.","  var started = false;","  function ev_mousemove (ev) {","    var x, y;","","    // Get the mouse position relative to the canvas element.","    if (ev.layerX || ev.layerX == 0) { // Firefox","      x = ev.layerX;","      y = ev.layerY;","    } else if (ev.offsetX || ev.offsetX == 0) { // Opera","      x = ev.offsetX;","      y = ev.offsetY;","    }","","    // The event handler works like a drawing pencil which tracks the mouse ","    // movements. We start drawing a path made up of lines.","    if (!started) {","      context.beginPath();","      context.moveTo(x, y);","      started = true;","    } else {","      context.lineTo(x, y);","      context.stroke();","    }","  }","","  init();","}, false); }"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":0},"end":{"row":101,"column":12},"action":"insert","lines":["if(window.addEventListener) {","window.addEventListener('load', function () {","  var canvas, context, tool;","","  function init () {","    // Find the canvas element.","    canvas = document.getElementById('imageView');","    if (!canvas) {","      alert('Error: I cannot find the canvas element!');","      return;","    }","","    if (!canvas.getContext) {","      alert('Error: no canvas.getContext!');","      return;","    }","","    // Get the 2D canvas context.","    context = canvas.getContext('2d');","    if (!context) {","      alert('Error: failed to getContext!');","      return;","    }","","    // Pencil tool instance.","    tool = new tool_pencil();","","    // Attach the mousedown, mousemove and mouseup event listeners.","    canvas.addEventListener('mousedown', ev_canvas, false);","    canvas.addEventListener('mousemove', ev_canvas, false);","    canvas.addEventListener('mouseup',   ev_canvas, false);","  }","","  // This painting tool works like a drawing pencil which tracks the mouse ","  // movements.","  function tool_pencil () {","    var tool = this;","    this.started = false;","","    // This is called when you start holding down the mouse button.","    // This starts the pencil drawing.","    this.mousedown = function (ev) {","        context.beginPath();","        context.moveTo(ev._x, ev._y);","        tool.started = true;","    };","","    // This function is called every time you move the mouse. Obviously, it only ","    // draws if the tool.started state is set to true (when you are holding down ","    // the mouse button).","    this.mousemove = function (ev) {","      if (tool.started) {","        context.lineTo(ev._x, ev._y);","        context.stroke();","      }","    };","","    // This is called when you release the mouse button.","    this.mouseup = function (ev) {","      if (tool.started) {","        tool.mousemove(ev);","        tool.started = false;","      }","    };","  }","","  // The general-purpose event handler. This function just determines the mouse ","  // position relative to the canvas element.","  function ev_canvas (ev) {","    if (ev.layerX || ev.layerX == 0) { // Firefox","      ev._x = ev.layerX;","      ev._y = ev.layerY;","    } else if (ev.offsetX || ev.offsetX == 0) { // Opera","      ev._x = ev.offsetX;","      ev._y = ev.offsetY;","    }","","    // Call the event handler of the tool.","    var func = tool[ev.type];","    if (func) {","      func(ev);","    }","  }","","  init();","","}, false); }"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":0},"end":{"row":101,"column":12},"action":"remove","lines":["if(window.addEventListener) {","window.addEventListener('load', function () {","  var canvas, context, tool;","","  function init () {","    // Find the canvas element.","    canvas = document.getElementById('imageView');","    if (!canvas) {","      alert('Error: I cannot find the canvas element!');","      return;","    }","","    if (!canvas.getContext) {","      alert('Error: no canvas.getContext!');","      return;","    }","","    // Get the 2D canvas context.","    context = canvas.getContext('2d');","    if (!context) {","      alert('Error: failed to getContext!');","      return;","    }","","    // Pencil tool instance.","    tool = new tool_pencil();","","    // Attach the mousedown, mousemove and mouseup event listeners.","    canvas.addEventListener('mousedown', ev_canvas, false);","    canvas.addEventListener('mousemove', ev_canvas, false);","    canvas.addEventListener('mouseup',   ev_canvas, false);","  }","","  // This painting tool works like a drawing pencil which tracks the mouse ","  // movements.","  function tool_pencil () {","    var tool = this;","    this.started = false;","","    // This is called when you start holding down the mouse button.","    // This starts the pencil drawing.","    this.mousedown = function (ev) {","        context.beginPath();","        context.moveTo(ev._x, ev._y);","        tool.started = true;","    };","","    // This function is called every time you move the mouse. Obviously, it only ","    // draws if the tool.started state is set to true (when you are holding down ","    // the mouse button).","    this.mousemove = function (ev) {","      if (tool.started) {","        context.lineTo(ev._x, ev._y);","        context.stroke();","      }","    };","","    // This is called when you release the mouse button.","    this.mouseup = function (ev) {","      if (tool.started) {","        tool.mousemove(ev);","        tool.started = false;","      }","    };","  }","","  // The general-purpose event handler. This function just determines the mouse ","  // position relative to the canvas element.","  function ev_canvas (ev) {","    if (ev.layerX || ev.layerX == 0) { // Firefox","      ev._x = ev.layerX;","      ev._y = ev.layerY;","    } else if (ev.offsetX || ev.offsetX == 0) { // Opera","      ev._x = ev.offsetX;","      ev._y = ev.offsetY;","    }","","    // Call the event handler of the tool.","    var func = tool[ev.type];","    if (func) {","      func(ev);","    }","  }","","  init();","","}, false); }"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":0,"column":3},"action":"remove","lines":["// "]},{"start":{"row":1,"column":0},"end":{"row":1,"column":3},"action":"remove","lines":["// "]},{"start":{"row":3,"column":0},"end":{"row":3,"column":3},"action":"remove","lines":["// "]},{"start":{"row":5,"column":0},"end":{"row":5,"column":3},"action":"remove","lines":["// "]},{"start":{"row":6,"column":0},"end":{"row":6,"column":3},"action":"remove","lines":["// "]},{"start":{"row":8,"column":0},"end":{"row":8,"column":3},"action":"remove","lines":["// "]},{"start":{"row":9,"column":0},"end":{"row":9,"column":3},"action":"remove","lines":["// "]},{"start":{"row":10,"column":0},"end":{"row":10,"column":3},"action":"remove","lines":["// "]},{"start":{"row":11,"column":0},"end":{"row":11,"column":3},"action":"remove","lines":["// "]},{"start":{"row":12,"column":0},"end":{"row":12,"column":3},"action":"remove","lines":["// "]},{"start":{"row":13,"column":0},"end":{"row":13,"column":3},"action":"remove","lines":["// "]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":15,"column":0},"end":{"row":15,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1427615374719,"hash":"406c1f4aa7b86ba0d56fd8d29a979f9633bc4623"}